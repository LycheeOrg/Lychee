name: Integrate

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    paths-ignore:
      - '**/*.md'
      - 'public/dist/*.js'
      - 'public/dist/**/*.js'
      - 'public/Lychee-front'
  pull_request:
    paths-ignore:
      - '**/*.md'
      - 'public/dist/*.js'
      - 'public/dist/**/*.js'
      - 'public/Lychee-front'
  # Allow manually triggering the workflow.
  workflow_dispatch:

jobs:
  kill_previous:
    name: 0️⃣ Kill previous runs
    runs-on: ubuntu-latest
    # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
    if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository)
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

  php_syntax_errors:
    name: 1️⃣ PHP - Syntax errors
    runs-on: ubuntu-latest
    needs:
      - kill_previous
    steps:
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        uses: ramsey/composer-install@v2

      - name: Check source code for syntax errors
        run: vendor/bin/parallel-lint --exclude .git --exclude vendor .

  code_style_errors:
    name: 2️⃣ PHP - Code Style errors
    runs-on: ubuntu-latest
    needs:
      - php_syntax_errors
    steps:
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: latest

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        uses: ramsey/composer-install@v2

      - name: Check source code for code style errors
        run: PHP_CS_FIXER_IGNORE_ENV=1 vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.php --verbose --diff --dry-run

  phpstan:
    name: 2️⃣ PHP 8.1 - PHPStan
    runs-on: ubuntu-latest
    needs:
      - php_syntax_errors
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          coverage: none

      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2

      - name: Run PHPStan
        run: vendor/bin/phpstan analyze

  tests:
    name: 2️⃣ PHP ${{ matrix.php-version }} - ${{ matrix.sql-versions }}
    needs:
      - php_syntax_errors
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version:
          - 8.1
          - 8.2
        sql-versions:
          - mariadb
          - postgresql
          - sqlite
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    env:
      extensions: bcmath, curl, dom, gd, imagick, json, libxml, mbstring, pcntl, pdo, pdo_sqlite, pdo_mysql, pdo_pgsql, pgsql, sqlite3, zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Up Imagick, FFmpeg & Exiftools
        run: |
          sudo apt-get update
          sudo apt-get --fix-broken install
          sudo apt-get -y install ffmpeg libimage-exiftool-perl

      - name: setup Databases
        run: |
          sudo service mysql start
          touch database/database.sqlite
          mysql -uroot -proot -e 'create database homestead_test;'

      - name: Setup PHP Action
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ env.extensions }}
          coverage: xdebug
          tools: pecl, composer

      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2

      - name: copy Env
        run: |
          cp .github/workflows/.env.${{ matrix.sql-versions }} .env

      - name: Generate secure key & Optimize application & Migrate
        run: |
          php artisan key:generate
          php artisan optimize
          php artisan migrate

      - name: Apply tests
        run: XDEBUG_MODE=coverage vendor/bin/phpunit

      - name: Codecov
        uses: codecov/codecov-action@v1

      - name: Make sure we can go backward
        run: php artisan migrate:rollback

  dist:
    name: 3️⃣ PHP ${{ matrix.php-version }} - ${{ matrix.sql-versions }} - Dist
    needs:
      - code_style_errors
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version:
          - 8.1
          - 8.2
        sql-versions:
          - mariadb
          - postgresql
          - sqlite
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    env:
      extensions: bcmath, curl, dom, gd, imagick, json, libxml, mbstring, pcntl, pdo, pdo_sqlite, pdo_mysql, pdo_pgsql, pgsql, sqlite3, zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Up Imagick, FFmpeg & Exiftools
        run: |
          sudo apt-get update
          sudo apt-get --fix-broken install
          sudo apt-get -y install ffmpeg libimage-exiftool-perl

      - name: setup Databases
        run: |
          sudo service mysql start
          touch database/database.sqlite
          mysql -uroot -proot -e 'create database homestead_test;'

      - name: Setup PHP Action
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ env.extensions }}
          tools: pecl, composer

      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2
        with:
          composer-options: --no-dev

      - name: Build Dist
        run: |
          make dist-clean

      - name: copy Env
        run: |
          cp .github/workflows/.env.${{ matrix.sql-versions }} Lychee/.env

      - name: setup MySQL Database with v3
        run: |
          mysql -uroot -proot homestead_test < .github/workflows/v3.sql

      - name: Generate secure key & Migrate & go backward
        run: |
          cd Lychee
          pwd
          php artisan key:generate
          php artisan migrate
          php artisan migrate:rollback

  createArtifact:
    name: 4️⃣ Build Artifact
    if: github.ref == 'refs/heads/master'
    needs:
      - phpstan
      - dist
      - tests
    runs-on: ubuntu-latest
    env:
      extensions: bcmath, curl, dom, gd, imagick, json, libxml, mbstring, pcntl, pdo, pdo_sqlite, pdo_mysql, pdo_pgsql, pgsql, sqlite3, zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: ${{ env.extensions }}
          coverage: none

      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2
        with:
          composer-options: --no-dev

      - name: Build Dist
        run: |
          make clean dist

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Lychee-Dist.zip
          path: Lychee.zip
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
