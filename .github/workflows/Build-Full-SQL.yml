name: Build-Full-SQL

# Run this workflow every time a new commit pushed to your repository
on:
  push:
  pull_request:
    branches:
      - master

jobs:
  tests:

    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest, ubuntu-20.04]
        php-versions: ['7.4']
    name: PHP ${{ matrix.php-versions }} Test on ${{ matrix.operating-system }}
    env:
      extensions: bcmath, curl, dom, gd, imagick, json, libxml, mbstring, pcntl, pdo, pdo_sqlite, pdo_mysql, pdo_pgsql, pgsql, sqlite3, zip
      key: cache-v1 # can be any string, change to clear the extension cache.
    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup cache environment
        id: extcache
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache PHP Extensions
        uses: actions/cache@v2
        with:
          path: ${{ steps.extcache.outputs.dir }}
          key: ${{ steps.extcache.outputs.key }}
          restore-keys: ${{ steps.extcache.outputs.key }}

      - name: Cache Composer Dependencies
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache/files
          key: dependencies-composer-${{ hashFiles('composer.json') }}

      - name: Setup PHP Action
        uses: shivammathur/setup-php@2.8.0
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          coverage: xdebug
          tools: pecl, composer
      
      - name: Install Exiftools
        run: sudo apt-get -y install libimage-exiftool-perl

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-suggest

      - name: setup Database
        run: |
          mysql -e 'create database homestead_test;'
          cp .env.mysql.travis .env


      - name: Check Syntax
        run: vendor/bin/php-cs-fixer fix --config=.php_cs --verbose --diff --dry-run
      
      - name: Generate secure key
        run: php artisan key:generate

      - name: Migrate Database
        run: php artisan migrate
      
      - name: Apply tests
        run: vendor/bin/phpunit --verbose

      - name: Make sure we can go backward
        run: php artisan migrate:rollback

      # - name: Install NPM dependencies
      #   run: npm install

      # - name: Compile assets
      #   run: npm run production

      # - name: Execute tests
      #   run: vendor/bin/phpunit --verbose

      # - name: Deploy
      #   if: github.ref == 'refs/heads/master'
      #   run: curl ${{ secrets.ENVOYER_HOOK }}?sha=${{ github.sha }}
