name: Build-Full-SQL

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    paths-ignore:
      - '**/*.md'
  pull_request:
    paths-ignore:
      - '**/*.md'

jobs:
  tests:

    runs-on: ${{ matrix.operating-system }}
    # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
    if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository)
    
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    strategy:
      matrix:
        operating-system: [ubuntu-20.04]
        php-versions: ['7.4', '8.0']
        sql-versions: ['mysql', 'postgresql', 'sqlite']

    name: PHP ${{ matrix.php-versions }} - ${{ matrix.sql-versions }}

    env:
      extensions: bcmath, curl, dom, gd, imagick, json, libxml, mbstring, pcntl, pdo, pdo_sqlite, pdo_mysql, pdo_pgsql, pgsql, sqlite3, zip, intl
      key: cache-v1 # can be any string, change to clear the extension cache.

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}

      # Checks out a copy of your repository on the ubuntu machine
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup cache environment
        id: extcache
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache PHP Extensions
        uses: actions/cache@v2
        with:
          path: ${{ steps.extcache.outputs.dir }}
          key: ${{ steps.extcache.outputs.key }}
          restore-keys: ${{ steps.extcache.outputs.key }}

      - name: Cache Composer Dependencies
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache/files
          key: dependencies-composer-${{ hashFiles('composer.json') }}

      - name: Setup PHP Action
        uses: shivammathur/setup-php@2.8.0
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          coverage: xdebug
          tools: pecl, composer
      
      - name: Set Up imagick (php8)
        if: ${{ matrix.php-versions != '7.4' }}
        run: sh scripts/install_imagick.sh
        # run: |
        #   git clone https://github.com/Imagick/imagick.git
        #   cd imagick && phpize && ./configure && make
        #   DEST=$(php -i | grep 'extension_dir => /')
        #   php -i | grep 'extension_dir => /'
        #   php -i | grep 'extension_dir'
        #   echo $DEST
        #   DEST2=$(echo "${DEST##* }")
        #   echo 'Copying imagick.so to ' $DEST2
        #   sudo cp modules/imagick.so $DEST2
        #   echo 'Update php.ini file at ' $(echo $(php --ini | grep 'Loaded Configuration File') | awk 'NF>1{print $NF}')
        #   sudo echo 'extension="imagick.so"' >> $(echo $(php --ini | grep 'Loaded Configuration File') | awk 'NF>1{print $NF}')
        #   cd ..

      - name: Install Exiftools
        run: sudo apt-get -y install libimage-exiftool-perl

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Check Syntax
        run: vendor/bin/php-cs-fixer fix --config=.php_cs --verbose --diff --dry-run

      - name: setup MySQL Database
        if: ${{ matrix.sql-versions == 'mysql' }}
        run: |
          sudo service mysql start
          mysql -uroot -proot -e 'create database homestead_test;'
          cp .github/workflows/.env.mariadb .env

      - name: setup PostGre Database
        if: ${{ matrix.sql-versions == 'postgresql' }}
        run: |
          cp .github/workflows/.env.postgresql .env

      - name: setup SQLite Database
        if: ${{ matrix.sql-versions == 'sqlite' }}
        run: |
          touch database/database.sqlite
          cp .github/workflows/.env.sqlite .env

      - name: Generate secure key & Migrate
        run: |
          php artisan key:generate
          php artisan migrate
      
      - name: Apply tests
        run: XDEBUG_MODE=coverage vendor/bin/phpunit --verbose

      - name: Codecov
        uses: codecov/codecov-action@v1

      - name: Make sure we can go backward
        run: php artisan migrate:rollback