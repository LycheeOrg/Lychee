<template>
	<Panel id="lychee_view_content" :header="$t(props.header)" class="w-full border-0">
		<template #icons>
			<a class="px-1 cursor-pointer group" @click="(layout.photos_layout = 'square') && activateLayout()" :title="$t('lychee.LAYOUT_SQUARES')">
				<MiniIcon icon="squares" fill="fill-transparent" :class="squareClass" />
			</a>
			<a
				class="px-1 cursor-pointer group"
				@click="(layout.photos_layout = 'justified') && activateLayout()"
				:title="$t('lychee.LAYOUT_JUSTIFIED')"
			>
				<MiniIcon icon="justified" fill="" :class="justifiedClass" />
			</a>
			<a class="px-1 cursor-pointer group" @click="(layout.photos_layout = 'masonry') && activateLayout()" :title="$t('lychee.LAYOUT_MASONRY')">
				<MiniIcon icon="masonry" fill="fill-transparent" :class="masonryClass" />
			</a>
			<a class="px-1 cursor-pointer group" @click="(layout.photos_layout = 'grid') && activateLayout()" :title="$t('lychee.LAYOUT_GRID')">
				<MiniIcon icon="grid" fill="fill-transparent" :class="gridClass" />
			</a>
		</template>
		<div class="relative flex flex-wrap flex-row flex-shrink w-full justify-start align-top" id="photoListing">
			<template v-for="(photo, idx) in props.photos">
				<PhotoThumb
					@click="maySelect(idx, $event)"
					@contextmenu.prevent="menuOpen(idx, $event)"
					:is-selected="props.selectedPhotos.includes(photo.id)"
					:photo="photo"
					:album="props.album"
				/>
			</template>
		</div>
	</Panel>
</template>
<script setup lang="ts">
import { computed, onMounted, onUpdated } from "vue";
import Panel from "primevue/panel";
import PhotoThumb from "@/components/gallery/thumbs/PhotoThumb.vue";
import MiniIcon from "@/components/icons/MiniIcon.vue";
import { useLayouts } from "@/layouts/PhotoLayout";
import { useLycheeStateStore } from "@/stores/LycheeState";
import { storeToRefs } from "pinia";
import { SplitData, useSplitter } from "@/composables/album/splitter";

const lycheeStore = useLycheeStateStore();
const { is_timeline_left_border_visible } = storeToRefs(lycheeStore);

const props = defineProps<{
	header: string;
	photos: { [key: number]: App.Http.Resources.Models.PhotoResource };
	album:
		| App.Http.Resources.Models.AlbumResource
		| App.Http.Resources.Models.TagAlbumResource
		| App.Http.Resources.Models.SmartAlbumResource
		| undefined;
	galleryConfig: App.Http.Resources.GalleryConfigs.PhotoLayoutConfig;
	selectedPhotos: string[];
}>();

// bubble up.
const emits = defineEmits<{
	clicked: [idx: number, event: MouseEvent];
	contexted: [idx: number, event: MouseEvent];
}>();
const maySelect = (idx: number, e: MouseEvent) => emits("clicked", idx, e);
const menuOpen = (idx: number, e: MouseEvent) => emits("contexted", idx, e);

const { spliter } = useSplitter();

const photosTimeLine = computed<SplitData<App.Http.Resources.Models.PhotoResource>[]>(() =>
	spliter(
		props.photos as App.Http.Resources.Models.PhotoResource[],
		(p: App.Http.Resources.Models.PhotoResource) => p.preformatted.timeline.timeDate ?? "",
		(p: App.Http.Resources.Models.PhotoResource) => p.preformatted.timeline.format ?? "Others",
	),
);

// Layouts stuff
const { activateLayout, layout, squareClass, justifiedClass, masonryClass, gridClass } = useLayouts(props.galleryConfig);
onMounted(() => activateLayout());
onUpdated(() => activateLayout());
</script>
