<?php

/** @noinspection PhpUndefinedClassInspection */

namespace App\Http\Controllers;

use App\Actions\Album\Archive;
use App\Actions\Album\Create;
use App\Actions\Album\CreateTag;
use App\Actions\Album\Delete;
use App\Actions\Album\Merge;
use App\Actions\Album\Move;
use App\Actions\Album\PositionData;
use App\Actions\Album\Prepare;
use App\Actions\Album\SetDescription;
use App\Actions\Album\SetLicense;
use App\Actions\Album\SetNSFW;
use App\Actions\Album\SetPublic;
use App\Actions\Album\SetShowTags;
use App\Actions\Album\SetSorting;
use App\Actions\Album\SetTitle;
use App\Actions\Album\Unlock;
use App\Assets\Helpers;
use App\Factories\AlbumFactory;
use App\Http\Requests\AlbumRequests\AlbumIDRequest;
use App\Http\Requests\AlbumRequests\AlbumIDRequestInt;
use App\Http\Requests\AlbumRequests\AlbumIDsRequest;
use App\Models\Logs;
use App\Response;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Symfony\Component\HttpFoundation\StreamedResponse;

class AlbumController extends Controller
{
	/**
	 * Add a new Album.
	 *
	 * @param Request $request
	 *
	 * @return false|string
	 */
	public function add(Request $request, Create $create)
	{
		$request->validate([
			'title' => 'string|required|max:100',
			'parent_id' => 'int|nullable',
		]);

		$album = $create->create($request['title'], $request['parent_id']);

		return Response::json($album->id, JSON_NUMERIC_CHECK);
	}

	/**
	 * Add a new album generated by tags.
	 *
	 * @param Request $request
	 *
	 * @return false|string
	 */
	public function addByTags(Request $request, CreateTag $create)
	{
		$request->validate([
			'title' => 'string|required|max:100',
			'tags' => 'string',
		]);

		$album = $create->create($request['title'], $request['tags']);

		return Response::json($album->id, JSON_NUMERIC_CHECK);
	}

	/**
	 * Provided an albumID, returns the album.
	 *
	 * @param Request $request
	 *
	 * @return array|string
	 */
	public function get(AlbumIDRequest $request, AlbumFactory $albumFactory, Prepare $prepare)
	{
		$album = $albumFactory->make($request['albumID']);

		return $prepare->do($album);
	}

	/**
	 * Provided an albumID, returns the album with only map related data.
	 *
	 * @param Request $request
	 *
	 * @return array|string
	 */
	public function getPositionData(AlbumIDRequest $request, PositionData $positionData)
	{
		$validated = $request->validate(['includeSubAlbums' => 'string|required']);

		return $positionData->get($request['albumID'], $validated);
	}

	/**
	 * Provided the albumID and passwords, return whether the album can be accessed or not.
	 *
	 * @param Request $request
	 *
	 * @return string
	 */
	public function getPublic(AlbumIDRequest $request, Unlock $unlock)
	{
		$request->validate([
			'password' => 'string|nullable',
		]);

		return $unlock->do($request['albumID'], $request['password']) ? 'true' : 'false';
	}

	/**
	 * Provided a title and albumIDs, change the title of the albums.
	 *
	 * @param Request $request
	 *
	 * @return string
	 */
	public function setTitle(AlbumIDsRequest $request, SetTitle $setTitle)
	{
		$request->validate([
			'title' => 'string|required|max:100',
		]);

		return $setTitle->do(explode(',', $request['albumIDs']), $request['title']) ? 'true' : 'false';
	}

	/**
	 * Change the sharing properties of the album.
	 *
	 * @param Request $request
	 *
	 * @return bool|string
	 */
	public function setPublic(AlbumIDRequestInt $request, SetPublic $setPublic)
	{
		$validated = $request->validate([
			'public' => 'integer|required',
			'visible' => 'integer|required',
			'nsfw' => 'integer|required',
			'downloadable' => 'integer|required',
			'share_button_visible' => 'integer|required',
			'full_photo' => 'integer|required',
			'password' => 'sometimes|string|nullable',
		]);

		return $setPublic->do($request['albumID'], $validated) ? 'true' : 'false'; // we should return a 422 or similar
	}

	/**
	 * Change the description of the album.
	 *
	 * @param Request $request
	 *
	 * @return bool|string
	 */
	public function setDescription(AlbumIDRequestInt $request, SetDescription $setDescription)
	{
		$request->validate([
			'description' => 'string|nullable|max:1000',
		]);

		return $setDescription->do($request['albumID'], $request['description'] ?? '') ? 'true' : 'false';
	}

	/**
	 * Change show tags of the tag album.
	 *
	 * @param Request $request
	 *
	 * @return bool|string
	 */
	public function setShowTags(AlbumIDRequestInt $request, SetShowTags $setShowTags)
	{
		$request->validate([
			'show_tags' => 'string|required|max:1000|min:1',
		]);

		return $setShowTags->do($request['albumID'], $request['show_tags']) ? 'true' : 'false';
	}

	/**
	 * Set the license of the Album.
	 *
	 * @param Request $request
	 *
	 * @return string
	 */
	public function setLicense(AlbumIDRequestInt $request, SetLicense $setLicense)
	{
		$request->validate([
			'license' => 'required|string',
		]);

		$licenses = Helpers::get_all_licenses();

		if (!in_array($request['license'], $licenses, true)) {
			Logs::error(__METHOD__, __LINE__, 'License not recognised: ' . $request['license']);

			return Response::error('License not recognised!');
		}

		return $setLicense->do($request['albumID'], $request['license']) ? 'true' : 'false';
	}

	/**
	 * Delete the album and all pictures in the album.
	 *
	 * @param Request $request
	 *
	 * @return string
	 */
	public function delete(AlbumIDsRequest $request, Delete $delete)
	{
		return $delete->do($request['albumIDs']) ? 'true' : 'false';
	}

	/**
	 * Merge albums. The first of the list is the destination of the merge.
	 *
	 * @param Request $request
	 *
	 * @return string
	 */
	public function merge(AlbumIDsRequest $request, Merge $merge)
	{
		// Convert to array
		$albumIDs = explode(',', $request['albumIDs']);
		// Get first albumID
		$albumID = array_shift($albumIDs);

		return $merge->do($albumID, $albumIDs) ? 'true' : 'false';
	}

	/**
	 * Move multiple albums into another album.
	 *
	 * @param Request $request
	 *
	 * @return string
	 */
	public function move(AlbumIDsRequest $request, Move $move)
	{
		// Convert to array
		$albumIDs = explode(',', $request['albumIDs']);

		// Get first albumID
		$albumID = array_shift($albumIDs);

		return $move->do($albumID, $albumIDs) ? 'true' : 'false';
	}

	/**
	 * Set if an album contains sensitive pictures.
	 *
	 * @param Request $request
	 *
	 * @return string
	 */
	public function setNSFW(Request $request, SetNSFW $setNSFW)
	{
		$request->validate([
			'albumID' => 'required|string',
		]);

		return $setNSFW->do($request['albumID'], '_') ? 'true' : 'false';
	}

	/**
	 * Define the default sorting type.
	 *
	 * @param Request $request
	 *
	 * @return string
	 */
	public function setSorting(AlbumIDRequest $request, SetSorting $setSorting)
	{
		$validated = $request->validate([
			'typePhotos' => 'nullable',
			'orderPhotos' => 'required|string',
		]);

		return $setSorting->do($request['albumID'], $validated) ? 'true' : 'false';
	}

	/**
	 * Return the archive of the pictures of the album and its subalbums.
	 *
	 * @param Request $request
	 *
	 * @return string|StreamedResponse
	 */
	public function getArchive(AlbumIDsRequest $request, Archive $archive)
	{
		if (Storage::getDefaultDriver() === 's3') {
			Logs::error(__METHOD__, __LINE__, 'getArchive not implemented for S3');

			return 'false';
		}

		$albumIDs = explode(',', $request['albumIDs']);

		return $archive->do($albumIDs);
	}
}
