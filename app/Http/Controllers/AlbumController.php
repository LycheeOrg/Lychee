<?php

namespace App\Http\Controllers;

use App\Actions\Album\Archive;
use App\Actions\Album\Create;
use App\Actions\Album\CreateTagAlbum;
use App\Actions\Album\Delete;
use App\Actions\Album\Merge;
use App\Actions\Album\Move;
use App\Actions\Album\PositionData;
use App\Actions\Album\SetCover;
use App\Actions\Album\SetDescription;
use App\Actions\Album\SetLicense;
use App\Actions\Album\SetNSFW;
use App\Actions\Album\SetPublic;
use App\Actions\Album\SetShowTags;
use App\Actions\Album\SetSorting;
use App\Actions\Album\SetTitle;
use App\Actions\Album\Unlock;
use App\Contracts\AbstractAlbum;
use App\Facades\Helpers;
use App\Factories\AlbumFactory;
use App\Http\Requests\AlbumRequests\AlbumIDRequest;
use App\Http\Requests\AlbumRequests\AlbumIDsRequest;
use App\Http\Requests\AlbumRequests\AlbumModelIDRequest;
use App\Models\Album;
use App\Models\Logs;
use App\Models\TagAlbum;
use Illuminate\Http\Request as IlluminateRequest;
use Illuminate\Http\Response as IlluminateResponse;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\Rule;
use Symfony\Component\HttpFoundation\Response as SymfonyResponse;

class AlbumController extends Controller
{
	/**
	 * Add a new Album.
	 *
	 * @param IlluminateRequest $request
	 * @param Create            $create
	 *
	 * @return Album
	 */
	public function add(IlluminateRequest $request, Create $create): Album
	{
		$request->validate([
			'title' => 'required|string|max:100',
			'parent_id' => 'present|nullable|numeric|integer|gte:0',
		]);

		return $create->create($request['title'], $request['parent_id']);
	}

	/**
	 * Add a new album generated by tags.
	 *
	 * @param IlluminateRequest $request
	 * @param CreateTagAlbum    $create
	 *
	 * @return false|string
	 */
	public function addTagAlbum(IlluminateRequest $request, CreateTagAlbum $create): TagAlbum
	{
		$request->validate([
			'title' => 'required|string|max:100',
			'tags' => 'string',
		]);

		return $create->create($request['title'], $request['tags']);
	}

	/**
	 * Provided an albumID, returns the album.
	 *
	 * @param AlbumIDRequest $request
	 * @param AlbumFactory   $albumFactory
	 *
	 * @return AbstractAlbum
	 */
	public function get(AlbumIDRequest $request, AlbumFactory $albumFactory): AbstractAlbum
	{
		$validated = $request->validated();

		return $albumFactory->findOrFail($validated['albumID']);
	}

	/**
	 * Provided an albumID, returns the album with only map related data.
	 *
	 * @param AlbumIDRequest $request
	 * @param PositionData   $positionData
	 *
	 * @return array
	 */
	public function getPositionData(AlbumIDRequest $request, PositionData $positionData): array
	{
		$validated = $request->validate(['includeSubAlbums' => 'required|boolean']);

		return $positionData->get($request['albumID'], $validated);
	}

	/**
	 * Provided the albumID and password, return whether the album can be accessed or not.
	 *
	 * @param AlbumIDRequest $request
	 * @param Unlock         $unlock
	 *
	 * @return IlluminateResponse
	 */
	public function unlock(AlbumIDRequest $request, Unlock $unlock): IlluminateResponse
	{
		$request->validate(['password' => 'required|string']);
		if ($unlock->do($request['albumID'], $request['password'])) {
			return response()->noContent();
		} else {
			return response('', 403);
		}
	}

	/**
	 * Provided a title and albumIDs, change the title of the albums.
	 *
	 * @param AlbumIDsRequest $request
	 * @param SetTitle        $setTitle
	 *
	 * @return IlluminateResponse
	 */
	public function setTitle(AlbumIDsRequest $request, SetTitle $setTitle): IlluminateResponse
	{
		$request->validate(['title' => 'required|string|max:100']);
		$setTitle->do(explode(',', $request['albumIDs']), $request['title']);

		return response()->noContent();
	}

	/**
	 * Change the sharing properties of the album.
	 *
	 * @param AlbumModelIDRequest $request
	 * @param SetPublic           $setPublic
	 *
	 * @return IlluminateResponse
	 */
	public function setPublic(AlbumModelIDRequest $request, SetPublic $setPublic): IlluminateResponse
	{
		$validated = $request->validate([
			'is_public' => 'required|boolean',
			'requires_link' => 'required|boolean',
			'is_nsfw' => 'required|boolean',
			'is_downloadable' => 'required|boolean',
			'is_share_button_visible' => 'required|boolean',
			'grants_full_photo' => 'required|boolean',
			'password' => 'sometimes|nullable|string',
		]);
		$setPublic->do($request['albumID'], $validated);

		return response()->noContent();
	}

	/**
	 * Change the description of the album.
	 *
	 * @param AlbumModelIDRequest $request
	 * @param SetDescription      $setDescription
	 *
	 * @return IlluminateResponse
	 */
	public function setDescription(AlbumModelIDRequest $request, SetDescription $setDescription): IlluminateResponse
	{
		$request->validate(['description' => 'string|nullable|max:1000']);
		$setDescription->do($request['albumID'], $request['description'] ?? null);

		return response()->noContent();
	}

	/**
	 * Change show tags of the tag album.
	 *
	 * @param AlbumModelIDRequest $request
	 * @param SetShowTags         $setShowTags
	 *
	 * @return IlluminateResponse
	 */
	public function setShowTags(AlbumModelIDRequest $request, SetShowTags $setShowTags): IlluminateResponse
	{
		$request->validate(['show_tags' => 'required|string|max:1000']);
		$setShowTags->do($request['albumID'], $request['show_tags']);

		return response()->noContent();
	}

	/**
	 * Set cover image of the album.
	 *
	 * @param AlbumModelIDRequest $request
	 * @param SetCover            $setCover
	 *
	 * @return IlluminateResponse
	 */
	public function setCover(AlbumModelIDRequest $request, SetCover $setCover): IlluminateResponse
	{
		$request->validate([
			'photoID' => 'present|nullable|numeric|integer|gte:0',
		]);
		$setCover->do($request['albumID'], $request['photoID']);

		return response()->noContent();
	}

	/**
	 * Set the license of the Album.
	 *
	 * @param AlbumModelIDRequest $request
	 * @param SetLicense          $setLicense
	 *
	 * @return IlluminateResponse
	 */
	public function setLicense(AlbumModelIDRequest $request, SetLicense $setLicense): IlluminateResponse
	{
		$request->validate([
			'license' => ['required', 'string', Rule::in(Helpers::get_all_licenses())],
		]);
		$setLicense->do($request['albumID'], $request['license']);

		return response()->noContent();
	}

	/**
	 * Delete the album and all pictures in the album.
	 *
	 * @param AlbumIDsRequest $request
	 * @param Delete          $delete
	 *
	 * @return IlluminateResponse
	 */
	public function delete(AlbumIDsRequest $request, Delete $delete): IlluminateResponse
	{
		if ($delete->do(explode(',', $request['albumIDs']))) {
			return response()->noContent();
		} else {
			return response('', 500);
		}
	}

	/**
	 * Merge albums. The first of the list is the destination of the merge.
	 *
	 * @param AlbumIDsRequest $request
	 * @param Merge           $merge
	 *
	 * @return IlluminateResponse
	 */
	public function merge(AlbumIDsRequest $request, Merge $merge): IlluminateResponse
	{
		// Convert to array
		$albumIDs = explode(',', $request['albumIDs']);
		// Get first albumID
		$targetAlbumID = array_shift($albumIDs);
		$merge->do($targetAlbumID, $albumIDs);

		return response()->noContent();
	}

	/**
	 * Move multiple albums into another album.
	 *
	 * @param AlbumIDsRequest $request
	 * @param Move            $move
	 *
	 * @return IlluminateResponse
	 */
	public function move(AlbumIDsRequest $request, Move $move): IlluminateResponse
	{
		// Convert to array
		$albumIDs = explode(',', $request['albumIDs']);
		// Get first albumID
		$targetAlbumID = array_shift($albumIDs);
		$move->do($targetAlbumID, $albumIDs);

		return response()->noContent();
	}

	/**
	 * Set if an album contains sensitive pictures.
	 *
	 * @param AlbumIDRequest $request
	 * @param SetNSFW        $setNSFW
	 *
	 * @return IlluminateResponse
	 */
	public function setNSFW(AlbumIDRequest $request, SetNSFW $setNSFW): IlluminateResponse
	{
		$setNSFW->do($request['albumID'], true);

		return response()->noContent();
	}

	/**
	 * Define the default sorting type.
	 *
	 * @param AlbumModelIDRequest $request
	 * @param SetSorting          $setSorting
	 *
	 * @return IlluminateResponse
	 */
	public function setSorting(AlbumModelIDRequest $request, SetSorting $setSorting): IlluminateResponse
	{
		$request->validate([
			'sortingCol' => ['present', Rule::in([
				null,
				'id',
				'taken_at',
				'title',
				'description',
				'is_public',
				'is_starred',
				'type',
			])],
			'sortingOrder' => ['present', Rule::in([null, 'ASC', 'DESC'])],
		]);

		if ($setSorting->do($request['albumID'], $request['sortingCol'], $request['sortingOrder'])) {
			return response()->noContent();
		} else {
			return response('', 500);
		}
	}

	/**
	 * Return the archive of the pictures of the album and its sub-albums.
	 *
	 * @param AlbumIDsRequest $request
	 * @param Archive         $archive
	 *
	 * @return SymfonyResponse
	 */
	public function getArchive(AlbumIDsRequest $request, Archive $archive): SymfonyResponse
	{
		if (Storage::getDefaultDriver() === 's3') {
			Logs::error(__METHOD__, __LINE__, 'getArchive not implemented for S3');

			return response('', 501);
		}

		$albumIDs = explode(',', $request['albumIDs']);

		return $archive->do($albumIDs);
	}
}
